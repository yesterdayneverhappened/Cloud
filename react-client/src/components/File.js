import React, { useState, useRef, useEffect } from 'react';
import '../styles-for-compontnts/Project.css';
import axios from 'axios';

export default function File({ file, deleteFile, onOpenContextMenu, renameFile, userId, moveFile }) {
  const [isMenuVisible, setIsMenuVisible] = useState(false);
  const [showModal, setShowModal] = useState(false); // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  const [projects, setProjects] = useState([]); // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
  const menuRef = useRef(null);
  const [showMoveModal, setShowMoveModal] = useState(false); // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è

  // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
  const toggleMenu = (e) => {
    e.stopPropagation();
    onOpenContextMenu();
    setIsMenuVisible(!isMenuVisible);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–µ–≥–æ
  const handleClickOutside = (e) => {
    if (menuRef.current && !menuRef.current.contains(e.target)) {
      setIsMenuVisible(false);
    }
  };

  useEffect(() => {
    document.addEventListener('click', handleClickOutside);
    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  }, []);

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyToClipboard = () => {
    const fileUrl = `http://localhost:5000/files/download/${file.id}`;
    navigator.clipboard.writeText(fileUrl)
      .then(() => alert(`–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${fileUrl}`))
      .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err));
  };

  // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  const openMoveModal = async () => {
    try {
      const response = await axios.get(`http://localhost:5000/projects/user/${userId}`); // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
      setProjects(response.data);
      setShowMoveModal(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
  };

  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
  const handleMenuAction = async (action) => {
    switch (action) {
      case 'info':
        setShowModal(true); 
        break;
      case 'rename':
        await renameFile(file); 
        break;
      case 'delete':
        deleteFile(file.id);
        break;
      case 'move':
        openMoveModal(); // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        break;
      case 'copy':
        copyToClipboard(); // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        break;
      default:
        break;
    }
    setIsMenuVisible(false);
  };


  const moveFileSystem = (fileId, projectId) => {
    console.log(projectId)
    try{
      moveFile(fileId, projectId)
      setShowMoveModal(false);
    } catch {
      alert("–£–ø—Å, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    }
  }
  return (
    <div className="file-card">
      <div className="file-content">
        <strong>{file.filename}</strong>
      </div>

      <div className="file-actions">
        <button
          onClick={() => window.open(`http://localhost:5000/files/download/${file.id}`, '_blank')}
          className="download-button"
        >
          –°–∫–∞—á–∞—Ç—å
        </button>

        <button className="menu-button" onClick={toggleMenu}>‚ãÆ</button>

        {isMenuVisible && (
          <div ref={menuRef} className="context-menu">
            <div onClick={() => handleMenuAction('info')}>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
            <div onClick={() => handleMenuAction('rename')}>‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</div>
            <div onClick={() => handleMenuAction('delete')}>‚ùå –£–¥–∞–ª–∏—Ç—å</div>
            <div onClick={() => handleMenuAction('move')}>üìÇ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å</div>
            <div onClick={() => handleMenuAction('copy')}>üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</div>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
        {showModal && (
          <div className="modal-overlay" onClick={() => setShowModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <button className="modal-close" onClick={() => setShowModal(false)}>‚úñ</button>
              <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ</h2>
              <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {file.filename}</p>
              <p><strong>–†–∞–∑–º–µ—Ä:</strong> {file.file_size} –±–∞–π—Ç</p>
              <p><strong>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:</strong> {file.file_extension}</p>
              <p><strong>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {new Date(file.created_at).toLocaleString()}</p>
            </div>
          </div>
        )}

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ */}
        {showMoveModal && (
          <div className="modal-overlay" onClick={() => setShowMoveModal(false)}>
            <div className="move-file-modal" onClick={(e) => e.stopPropagation()}>
              <button 
                className="move-file-close"
                onClick={() => setShowMoveModal(false)}
              >
                ‚úñ
              </button>
              <h2 className="move-file-title">–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª</h2>
              <p className="move-file-description">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:</p>
              <ul className="move-file-list">
                {projects.map((project) => (
                  <li key={project.id} className="move-file-item">
                    <button 
                      className="move-file-button" 
                      onClick={() => moveFileSystem(file.id, project.id)}
                    >
                      {project.name}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
