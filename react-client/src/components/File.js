import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import * as XLSX from 'xlsx'; // For working with spreadsheets
import '../styles-for-compontnts/Project.css';
import mammoth from 'mammoth';

export default function File({ file, deleteFile, onOpenContextMenu, renameFile, userId, moveFile }) {
  const [isMenuVisible, setIsMenuVisible] = useState(false);
  const [showModal, setShowModal] = useState(false); // Modal for file info
  const [showMoveModal, setShowMoveModal] = useState(false); // Modal for file move
  const [projects, setProjects] = useState([]); // List of projects
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [modalContent, setModalContent] = useState(null);
  const [modalTitle, setModalTitle] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const menuRef = useRef(null);

  const fileColors = {
    'xls': 'green',
    'xlsx': 'green',
    'ppt': 'orange',
    'pptx': 'orange',
    'doc': 'blue',
    'docx': 'blue',
    'pdf': 'red',
    'txt': 'gray',
    'csv': 'purple'
  };

  const getFileBorderColor = (extension) => fileColors[extension.toLowerCase()] || 'black';

  // Show/hide context menu
  const toggleMenu = (e) => {
    e.stopPropagation();
    onOpenContextMenu();
    setIsMenuVisible(!isMenuVisible);
  };

  // Fetch file preview
  const handleFilePreview = async () => {
    setIsLoading(true); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  
    try {
      const response = await axios.get(`http://localhost:5000/files/download/${file.id}`, {
        responseType: 'arraybuffer', // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      });
  
      const fileType = file.file_extension.toLowerCase();
  
      if (['txt'].includes(fileType)) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        const textContent = new TextDecoder('utf-8').decode(response.data);
        setModalContent(<pre>{textContent}</pre>);
        setModalTitle('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞');
      } else if (['doc', 'docx'].includes(fileType)) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Word —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mammoth
        const arrayBuffer = response.data;
  
        mammoth.convertToHtml({ arrayBuffer })
          .then(result => {
            setModalContent(<div dangerouslySetInnerHTML={{ __html: result.value }} />);
            setModalTitle('–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ Word');
          })
          .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Word —Ñ–∞–π–ª–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Word —Ñ–∞–π–ª–∞.');
          });
      } else if (['png', 'jpg', 'jpeg'].includes(fileType)) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const imageUrl = URL.createObjectURL(new Blob([response.data]));
        setModalContent(
          <img src={imageUrl} alt={file.filename} style={{ maxWidth: '100%' }} />
        );
        setModalTitle('–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      } else if (fileType === 'xlsx') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤
        const workbook = XLSX.read(new Uint8Array(response.data), { type: 'array' });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        const htmlTable = XLSX.utils.sheet_to_html(sheet);
        setModalContent(<div dangerouslySetInnerHTML={{ __html: htmlTable }} />);
        setModalTitle('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã');
      } else if (fileType === 'pdf') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
        const blob = new Blob([response.data], { type: 'application/pdf' });
        const pdfUrl = URL.createObjectURL(blob);
        setModalContent(
          <iframe src={pdfUrl} style={{ width: '100%', height: '500px' }} title="PDF Preview" />
        );
        setModalTitle('–ü—Ä–æ—Å–º–æ—Ç—Ä PDF');
      } else {
        alert('–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.');
        return;
      }
  
      setIsModalVisible(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.');
    } finally {
      setIsLoading(false); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    }
  };

  // Close context menu if clicked outside
  const handleClickOutside = (e) => {
    if (menuRef.current && !menuRef.current.contains(e.target)) {
      setIsMenuVisible(false);
    }
  };

  // Copy file URL to clipboard
  const copyToClipboard = () => {
    const fileUrl = `http://localhost:5000/files/download/${file.id}`;
    navigator.clipboard.writeText(fileUrl)
      .then(() => alert(`–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n${fileUrl}`))
      .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err));
  };

  // Open modal for file move
  const openMoveModal = async () => {
    try {
      const response = await axios.get(`http://localhost:5000/projects/user/${userId}`);
      setProjects(response.data);
      setShowMoveModal(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
    }
  };

  // Handle menu actions
  const handleMenuAction = async (action) => {
    switch (action) {
      case 'info':
        setShowModal(true);
        break;
      case 'rename':
        await renameFile(file);
        break;
      case 'delete':
        deleteFile(file.id);
        break;
      case 'move':
        openMoveModal();
        break;
      case 'copy':
        copyToClipboard();
        break;
      default:
        break;
    }
    setIsMenuVisible(false);
  };

  // Move file between projects
  const moveFileSystem = (fileId, projectId) => {
    try {
      moveFile(fileId, projectId);
      setShowMoveModal(false);
    } catch {
      alert("–£–ø—Å, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞");
    }
  };

  useEffect(() => {
    document.addEventListener('click', handleClickOutside);
    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  }, []);

  return (
    <div className="file-card" style={{ border: `1px solid ${getFileBorderColor(file.file_extension)}` }}>
      <div className="file-content"
        style={{
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap',
          maxWidth: '200px'
        }}
        onClick={handleFilePreview}
      >
        <strong>{file.filename}</strong>
      </div>

      <div className="file-actions">
        <button
          onClick={() => window.open(`http://localhost:5000/files/download/${file.id}`, '_blank')}
          className="download-button"
        >
          –°–∫–∞—á–∞—Ç—å
        </button>

        <button className="menu-button" onClick={toggleMenu}>‚ãÆ</button>

        {isMenuVisible && (
          <div ref={menuRef} className="context-menu">
            <div onClick={() => handleMenuAction('info')}>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
            <div onClick={() => handleMenuAction('rename')}>‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</div>
            <div onClick={() => handleMenuAction('delete')}>‚ùå –£–¥–∞–ª–∏—Ç—å</div>
            <div onClick={() => handleMenuAction('move')}>üìÇ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å</div>
            <div onClick={() => handleMenuAction('copy')}>üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</div>
          </div>
        )}

        {/* File info modal */}
        {showModal && (
          <div className="modal-overlay" onClick={() => setShowModal(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <button className="modal-close" onClick={() => setShowModal(false)}>‚úñ</button>
              <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ</h2>
              <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {file.filename}</p>
              <p><strong>–†–∞–∑–º–µ—Ä:</strong> {file.file_size} –±–∞–π—Ç</p>
              <p><strong>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ:</strong> {file.file_extension}</p>
              <p><strong>–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</strong> {new Date(file.created_at).toLocaleString()}</p>
            </div>
          </div>
        )}

        {/* Move file modal */}
        {showMoveModal && (
          <div className="modal-overlay" onClick={() => setShowMoveModal(false)}>
            <div className="move-file-modal" onClick={(e) => e.stopPropagation()}>
              <button className="move-file-close" onClick={() => setShowMoveModal(false)}>‚úñ</button>
              <h2 className="move-file-title">–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª</h2>
              <p className="move-file-description">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:</p>
              <ul className="move-file-list">
                {projects.map((project) => (
                  <li key={project.id} className="move-file-item">
                    <button className="move-file-button" onClick={() => moveFileSystem(file.id, project.id)}>
                      {project.name}
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        )}
        {isLoading && (
          <div className="loading-overlay">
            <div className="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div> {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
          </div>
        )}
        {/* File preview modal */}
        {isModalVisible && (
          <div className="modal-overlay" onClick={() => setIsModalVisible(false)}>
            <div className="modal-content" onClick={(e) => e.stopPropagation()}>
              <button className="modal-close" onClick={() => setIsModalVisible(false)}>‚úñ</button>
              <h2>{modalTitle}</h2>
              <div className="modal-body">{modalContent}</div>
            </div>
          </div>
        )}

      </div>
    </div>
  );
}
